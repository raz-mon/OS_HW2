Understanding stuff:
  - How to implement the linked-lists?
  - How to enforce synchronization to the functions?
    Our current idea requires an integer for each function.
  - 


Make sure we implemented the following correct:
    - Implementation of allocpid (cas instead of pidlock).
    - Implementation of the CAS function (assembly, in cas.S).
    - Implementation of Linked-List.
    - If we want to introduce NULL (=0) to the program, where is it best to do so? (At proc.c at the moment).
    - In page 4, in the linked-list implementation sector, what is the meaning of:
        "In addition, since your CAS implementation is for int (32 bit) and
        not uint64, you canâ€™t use it for pointers (as those are uint64 in Xv6). Thus, your linked list implementation
        will have to refer to the next link by using indices rather then pointer."
        ??
      Does this mean that the 'data' field of each link is an index of the process in the proc structure (array of 
      struct proc)? Or does it refer to the 'next' field in each link in the linked-list?
    - Where should we put the linked-lists? How should we initialize them?
    - How do we use cas in order to ensure safe manipulation of the lists?
    - Are we to put a list in the cpu struct? (So that each cpu has a list).
    - Using cas to synchronize - implementation - see get_ind in proc.c.. Problem - we need allot of locks like this 
      so they don't all use the same on (different functions - different locks). Doesn't make too much sense..?
    
    


Todo:
- Change linked-list implementations (concurrent using PCB lock, and as specified in the assingment).
- Change functions as described in the assignment (e.g., fork, scheduler, exit etc.).
- Update index of each process (in proc_init or something like that).
- 

